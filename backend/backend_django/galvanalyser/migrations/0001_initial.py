# Generated by Django 4.1.4 on 2023-03-02 12:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TimeseriesData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.PositiveBigIntegerField(help_text='Row number')),
                ('column_id', models.PositiveIntegerField(help_text='Column whose data are represented')),
                ('value', models.FloatField(help_text='Cell value for Column on this row')),
            ],
            options={
                'db_table': 'timeseries_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.TextField(help_text='Human-friendly identifier', null=True, unique=True)),
                ('uid', models.TextField(help_text='Serial number or similar. Should be globally unique', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CellFamily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Human-friendly identifier', unique=True)),
                ('form_factor', models.TextField(help_text='Physical shape of the cells')),
                ('link_to_datasheet', models.TextField(help_text='Link to a detailed datasheet for these cells')),
                ('anode_chemistry', models.TextField(help_text="Chemistry of the cells' anode")),
                ('cathode_chemistry', models.TextField(help_text="Chemistry of the cells' cathode")),
                ('nominal_capacity', models.FloatField(help_text='Nominal capacity of the cells (in amp hours)')),
                ('nominal_cell_weight', models.FloatField(help_text='Nominal weight of the cells (in kilograms)')),
                ('manufacturer', models.TextField(help_text="Name of the cells' manufacturer")),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Human-friendly identifier', null=True)),
                ('date', models.DateTimeField(help_text='Date and time of experiment. Time will be midnight if not specified in raw data')),
                ('type', models.TextField(help_text='Format of the raw data', null=True)),
                ('purpose', models.TextField(help_text='Type of the experiment')),
                ('json_data', models.JSONField(help_text='Arbitrary additional metadata', null=True)),
                ('cell', models.ForeignKey(help_text='Cell that generated this Dataset', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='datasets', to='galvanalyser.cell')),
            ],
        ),
        migrations.CreateModel(
            name='DataUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Common name')),
                ('symbol', models.TextField(help_text='Symbol')),
                ('description', models.TextField(help_text='What the Unit signifies, and how it is used')),
                ('is_default', models.BooleanField(default=False, help_text='Whether the Unit is included in the initial list of Units')),
            ],
        ),
        migrations.CreateModel(
            name='Harvester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Human-friendly Harvester identifier', unique=True)),
                ('api_key', models.TextField(help_text='API access token for the Harvester', null=True)),
                ('last_check_in', models.DateTimeField(help_text='Date and time of last Harvester contact', null=True)),
                ('sleep_time', models.IntegerField(default=10, help_text='Seconds to sleep between Harvester cycles')),
                ('admin_group', models.ForeignKey(help_text='Users authorised to make changes to the Harvester', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='editable_harvesters', to='auth.group')),
                ('user_group', models.ForeignKey(help_text='Users authorised to create Paths on the Harvester', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='readable_harvesters', to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='KnoxAuthToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('knox_token_key', models.TextField(help_text='KnoxToken reference ([token_key]_[user_id]')),
                ('name', models.TextField(help_text='Convenient human-friendly name')),
            ],
        ),
        migrations.CreateModel(
            name='MonitoredPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(help_text='Directory location on Harvester')),
                ('stable_time', models.PositiveSmallIntegerField(default=60, help_text='Number of seconds files must remain stable to be processed')),
                ('admin_group', models.ForeignKey(help_text='Users authorised to remove and edit this Path. Harvester admins are also authorised', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='editable_paths', to='auth.group')),
                ('harvester', models.ForeignKey(help_text='Harvester with access to this directory', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitored_paths', to='galvanalyser.harvester')),
                ('user_group', models.ForeignKey(help_text='Users authorised to view this Path and child Datasets', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='readable_paths', to='auth.group')),
            ],
            options={
                'unique_together': {('harvester', 'path')},
            },
        ),
        migrations.CreateModel(
            name='VouchFor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_user', models.ForeignKey(help_text='User needing approval', on_delete=django.db.models.deletion.DO_NOTHING, related_name='vouched_for', to=settings.AUTH_USER_MODEL)),
                ('vouching_user', models.ForeignKey(help_text='User doing approving', on_delete=django.db.models.deletion.DO_NOTHING, related_name='vouched_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TimeseriesRangeLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField(help_text='Human-friendly identifier')),
                ('range_start', models.PositiveBigIntegerField(help_text='Row (sample number) at which the range starts')),
                ('range_end', models.PositiveBigIntegerField(help_text='Row (sample number) at which the range ends')),
                ('info', models.TextField(help_text='Additional information')),
                ('dataset', models.ForeignKey(help_text='Dataset to which the Range applies', on_delete=django.db.models.deletion.CASCADE, related_name='range_labels', to='galvanalyser.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='ObservedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relative_path', models.TextField(help_text='File path from Harvester directory Path')),
                ('last_observed_size', models.PositiveBigIntegerField(default=0, help_text='Size of the file as last reported by Harvester')),
                ('last_observed_time', models.DateTimeField(help_text='Date and time of last Harvester report on file', null=True)),
                ('state', models.TextField(choices=[('RETRY IMPORT', 'Retry Import'), ('IMPORT FAILED', 'Import Failed'), ('UNSTABLE', 'Unstable'), ('GROWING', 'Growing'), ('STABLE', 'Stable'), ('IMPORTING', 'Importing'), ('IMPORTED', 'Imported')], default='UNSTABLE', help_text='File status; autogenerated but can be manually set to RETRY IMPORT')),
                ('monitored_path', models.ForeignKey(help_text='Harvester directory Path where file is located', on_delete=django.db.models.deletion.CASCADE, related_name='files', to='galvanalyser.monitoredpath')),
            ],
            options={
                'unique_together': {('monitored_path', 'relative_path')},
            },
        ),
        migrations.CreateModel(
            name='HarvestError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error', models.TextField(help_text='Text of the error report')),
                ('timestamp', models.DateTimeField(auto_now=True, help_text='Date and time error was logged in the database', null=True)),
                ('file', models.ForeignKey(help_text='File where error originated', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='errors', to='galvanalyser.observedfile')),
                ('harvester', models.ForeignKey(help_text='Harvester which reported the error', on_delete=django.db.models.deletion.CASCADE, related_name='paths', to='galvanalyser.harvester')),
                ('path', models.ForeignKey(help_text='Path to data directory where error originated', on_delete=django.db.models.deletion.DO_NOTHING, to='galvanalyser.monitoredpath')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Specific identifier', unique=True)),
                ('type', models.TextField(help_text='Generic name')),
                ('datasets', models.ManyToManyField(help_text='Datasets the Equipment is used in', related_name='equipment', to='galvanalyser.dataset')),
            ],
        ),
        migrations.AddField(
            model_name='dataset',
            name='file',
            field=models.ForeignKey(help_text='File storing raw data', on_delete=django.db.models.deletion.DO_NOTHING, related_name='datasets', to='galvanalyser.observedfile'),
        ),
        migrations.CreateModel(
            name='DataColumnType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Human-friendly identifier')),
                ('description', models.TextField(help_text='Origins and purpose')),
                ('is_default', models.BooleanField(default=False, help_text='Whether the Column is included in the initial list of known Column Types')),
                ('unit', models.ForeignKey(help_text='Unit used for measuring the values in this column', null=True, on_delete=django.db.models.deletion.SET_NULL, to='galvanalyser.dataunit')),
            ],
            options={
                'unique_together': {('unit', 'name')},
            },
        ),
        migrations.CreateModel(
            name='DataColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Column title e.g. in .tsv file headers')),
                ('dataset', models.ForeignKey(help_text='Dataset in which this Column appears', on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='galvanalyser.dataset')),
                ('type', models.ForeignKey(help_text='Column Type which this Column instantiates', on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.datacolumntype')),
            ],
            options={
                'unique_together': {('dataset', 'name')},
            },
        ),
        migrations.AddField(
            model_name='cell',
            name='family',
            field=models.ForeignKey(help_text='Family to which this cell belongs', on_delete=django.db.models.deletion.DO_NOTHING, related_name='cells', to='galvanalyser.cellfamily'),
        ),
        migrations.AlterUniqueTogether(
            name='dataset',
            unique_together={('file', 'date')},
        ),
        migrations.CreateModel(
            name='DataColumnStringKeys',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.PositiveBigIntegerField(help_text="Value in the Column's TimeseriesData")),
                ('string', models.TextField(help_text='String to be substituted for key value')),
                ('column', models.ForeignKey(help_text='Column whose string values are mapped', on_delete=django.db.models.deletion.CASCADE, related_name='string_keys', to='galvanalyser.datacolumn')),
            ],
            options={
                'unique_together': {('column', 'key', 'string')},
            },
        ),
    ]
