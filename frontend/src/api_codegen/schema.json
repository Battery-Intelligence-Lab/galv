{
    "openapi": "3.0.3",
    "info": {
        "title": "Battery Data API",
        "version": "2.0.0",
        "description": "A standard API for accessing battery experiment datasets and metadata",
        "contact": {
            "email": "martin.robinson@cs.ox.ac.uk"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "paths": {
        "/cell_chemistries/": {
            "get": {
                "operationId": "cell_chemistries_list",
                "description": "Cell Chemistries are used to describe the chemistry of cell used in an experiment.\nExamples are \"NMC\", \"LFP\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cell_chemistries"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cell_families/": {
            "get": {
                "operationId": "cell_families_list",
                "description": "\nCell Families group together the general properties of a type of Cell.\nEach Cell is associated with a Cell Family.\n\nSearchable fields:\n- name\n- manufacturer\n- form_factor\n        ",
                "summary": "View Cell Families",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cell_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCellFamilyList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "cell_families_create",
                "description": "\nCell Families group together the general properties of a type of Cell.\nEach Cell is associated with a Cell Family.\n        ",
                "summary": "Create a Cell Family",
                "tags": [
                    "cell_families"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CellFamily"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CellFamily"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CellFamily"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CellFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cell_families/{uuid}/": {
            "get": {
                "operationId": "cell_families_retrieve",
                "description": "\nCell Families group together the general properties of a type of Cell.\nEach Cell is associated with a Cell Family.\n        ",
                "summary": "View a Cell Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell family.",
                        "required": true
                    }
                ],
                "tags": [
                    "cell_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CellFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "cell_families_partial_update",
                "description": "\nCell Families that do not have any Cells associated with them may be edited.\nCell Families that _do_ have Cells associated with them are locked,\nto prevent accidental updating.\n        ",
                "summary": "Update a Cell Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell family.",
                        "required": true
                    }
                ],
                "tags": [
                    "cell_families"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCellFamily"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCellFamily"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCellFamily"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CellFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "cell_families_destroy",
                "description": "\nCell Families that do not have any Cells associated with them may be deleted.\nCell Families that _do_ have Cells associated with them are locked,\nto prevent accidental updating.\n        ",
                "summary": "Delete a Cell Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell family.",
                        "required": true
                    }
                ],
                "tags": [
                    "cell_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/cell_form_factors/": {
            "get": {
                "operationId": "cell_form_factors_list",
                "description": "Cell Form Factors are used to describe the form factor of cell used in an experiment.\nExamples are \"Pouch\", \"Cylindrical\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cell_form_factors"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cell_manufacturers/": {
            "get": {
                "operationId": "cell_manufacturers_list",
                "description": "Cell Manufacturers are used to describe the manufacturer of cell used in an experiment.\nExamples are \"Sony\", \"LG\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cell_manufacturers"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cell_models/": {
            "get": {
                "operationId": "cell_models_list",
                "description": "Cell Models are used to describe the model of cell used in an experiment.\nExamples are \"VTC6\", \"HG2\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cell_models"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cells/": {
            "get": {
                "operationId": "cells_list",
                "description": "\nCells are specific cells which generate data stored in Datasets/observed Files.\n\nSearchable fields:\n- identifier\n        ",
                "summary": "View Cells",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cells"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCellList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "cells_create",
                "description": "\nCreate an instance of a Cell by declaring its unique identifier and associated Cell Family.\n        ",
                "summary": "Create a Cell",
                "tags": [
                    "cells"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Cell"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Cell"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Cell"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Cell"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cells/{uuid}/": {
            "get": {
                "operationId": "cells_retrieve",
                "description": "\nCells are specific cells which generate data stored in Datasets/observed Files.\n        ",
                "summary": "View a Cell",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell.",
                        "required": true
                    }
                ],
                "tags": [
                    "cells"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Cell"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "cells_partial_update",
                "description": "\nCells that are not used in Cycler Tests may be edited.\nCells that _are_ used in a Cycler Tests are locked to prevent accidental updating.\n        ",
                "summary": "Update a Cell",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell.",
                        "required": true
                    }
                ],
                "tags": [
                    "cells"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCell"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCell"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCell"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Cell"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "cells_destroy",
                "description": "\nCells that are not used in Cycler Tests may be deleted.\nCells that _are_ used in a Cycler Tests are locked to prevent accidental updating.\n        ",
                "summary": "Delete a Cell",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell.",
                        "required": true
                    }
                ],
                "tags": [
                    "cells"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/cells/{uuid}/rdf/": {
            "get": {
                "operationId": "cells_rdf_retrieve",
                "description": "\nDump the Cell in RDF (JSON-LD) format.\n        ",
                "summary": "View a Cell in RDF (JSON-LD)",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cell.",
                        "required": true
                    }
                ],
                "tags": [
                    "cells"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Cell"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/column_types/": {
            "get": {
                "operationId": "column_types_list",
                "description": "\nColumn Types are generic Column templates. They hold the metadata for a Column,\nwhile the individual Column instances link Column Types to the TimeseriesData they contain.\n\nSome Column Types are innately recognised by Galv and its harvester parsers,\nwhile others can be defined by the parsers during data processing.\n\nSearchable fields:\n- name\n- description\n        ",
                "summary": "View Column Types",
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_default",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "unit__name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "unit__symbol",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "column_types"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDataColumnTypeList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/column_types/{id}/": {
            "get": {
                "operationId": "column_types_retrieve",
                "description": "\nColumn Types are generic Column templates. They hold the metadata for a Column,\nwhile the individual Column instances link Column Types to the TimeseriesData they contain.\n\nSome Column Types are innately recognised by Galv and its harvester parsers,\nwhile others can be defined by the parsers during data processing.\n\nSearchable fields:\n- name\n- description\n        ",
                "summary": "View a Column Type",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this data column type.",
                        "required": true
                    }
                ],
                "tags": [
                    "column_types"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataColumnType"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/columns/": {
            "get": {
                "operationId": "columns_list",
                "description": "\nColumn instances link Column Types to the TimeseriesData they contain.\nYou can access any Column in any Dataset to which you have access.\n\nSearchable fields:\n- dataset__name\n- type__name (Column Type name)\n        ",
                "summary": "View Columns to which you have access",
                "parameters": [
                    {
                        "in": "query",
                        "name": "file__name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "file__uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type__id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type__is_required",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type__name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type__unit__symbol",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "columns"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDataColumnList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/columns/{id}/": {
            "get": {
                "operationId": "columns_retrieve",
                "description": "\nColumn instances link Column Types to the TimeseriesData they contain.\n\nSearchable fields:\n- dataset__name\n- type__name (Column Type name)\n        ",
                "summary": "View a Column",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this data column.",
                        "required": true
                    }
                ],
                "tags": [
                    "columns"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataColumn"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/columns/{id}/values/": {
            "get": {
                "operationId": "columns_values_retrieve",
                "description": "\nView the TimeseriesData contents of the Column.\n\nData are presented as a stream of values separated by newlines.\n\nCan be filtered with querystring parameters `min` and `max`, and `mod` (modulo) by specifying a sample number.\n        ",
                "summary": "View Column data as newline-separated stream of values",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this data column.",
                        "required": true
                    }
                ],
                "tags": [
                    "columns"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/create_token/": {
            "post": {
                "operationId": "create_token_create",
                "description": "\nAccess to the API is authenticated by API Tokens.\nWhen you log into the web frontend, you are issued with a temporary token\nto allow your browser session to function.\nIf you wish to access the API via the Python client, or similar programmatically routes,\nyou will likely want a token with a longer expiry time. Those tokens are created using\nthis endpoint.\n    ",
                "summary": "Create a new API Token",
                "tags": [
                    "create_token"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateKnoxToken"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateKnoxToken"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateKnoxToken"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KnoxTokenFull"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cycler_tests/": {
            "get": {
                "operationId": "cycler_tests_list",
                "description": "Cycler Tests are the primary object in the database.\nThey represent a single test conducted on a specific cell using specific equipment,\naccording to a specific schedule.\n\nThe test produces a dataset which can be associated with the Cycler Test,\nand Cycler Tests can be grouped together into Experiments.",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "cycler_tests"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCyclerTestList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "cycler_tests_create",
                "description": "Cycler Tests are the primary object in the database.\nThey represent a single test conducted on a specific cell using specific equipment,\naccording to a specific schedule.\n\nThe test produces a dataset which can be associated with the Cycler Test,\nand Cycler Tests can be grouped together into Experiments.",
                "tags": [
                    "cycler_tests"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CyclerTest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CyclerTest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CyclerTest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CyclerTest"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/cycler_tests/{uuid}/": {
            "get": {
                "operationId": "cycler_tests_retrieve",
                "description": "Cycler Tests are the primary object in the database.\nThey represent a single test conducted on a specific cell using specific equipment,\naccording to a specific schedule.\n\nThe test produces a dataset which can be associated with the Cycler Test,\nand Cycler Tests can be grouped together into Experiments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cycler test.",
                        "required": true
                    }
                ],
                "tags": [
                    "cycler_tests"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CyclerTest"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "cycler_tests_partial_update",
                "description": "Cycler Tests are the primary object in the database.\nThey represent a single test conducted on a specific cell using specific equipment,\naccording to a specific schedule.\n\nThe test produces a dataset which can be associated with the Cycler Test,\nand Cycler Tests can be grouped together into Experiments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cycler test.",
                        "required": true
                    }
                ],
                "tags": [
                    "cycler_tests"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCyclerTest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCyclerTest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCyclerTest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CyclerTest"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "cycler_tests_destroy",
                "description": "Cycler Tests are the primary object in the database.\nThey represent a single test conducted on a specific cell using specific equipment,\naccording to a specific schedule.\n\nThe test produces a dataset which can be associated with the Cycler Test,\nand Cycler Tests can be grouped together into Experiments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this cycler test.",
                        "required": true
                    }
                ],
                "tags": [
                    "cycler_tests"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/equipment/": {
            "get": {
                "operationId": "equipment_list",
                "description": "\nExperimental equipment used in experiments which generate Files and their Cycler Tests.\n\nSearchable fields:\n- name\n- type\n        ",
                "summary": "View Equipment",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "equipment"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedEquipmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "equipment_create",
                "description": "\nCreate Equipment by describing its role and purpose.\n        ",
                "summary": "Create Equipment",
                "tags": [
                    "equipment"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Equipment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Equipment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Equipment"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Equipment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/equipment/{uuid}/": {
            "get": {
                "operationId": "equipment_retrieve",
                "description": "\nExperimental equipment used in experiments which generate Files and their Cycler Tests.\n        ",
                "summary": "View specific Equipment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this equipment.",
                        "required": true
                    }
                ],
                "tags": [
                    "equipment"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Equipment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "equipment_partial_update",
                "description": "\nEquipment that is not used in Cycler Tests may be edited.\nEquipment that _is_ used in a Cycler Tests is locked to prevent accidental updating.\n        ",
                "summary": "Update Equipment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this equipment.",
                        "required": true
                    }
                ],
                "tags": [
                    "equipment"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEquipment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEquipment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEquipment"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Equipment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "equipment_destroy",
                "description": "\nEquipment that is not used in Cycler Tests may be deleted.\nEquipment that _is_ used in a Cycler Tests is locked to prevent accidental updating.\n        ",
                "summary": "Delete Equipment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this equipment.",
                        "required": true
                    }
                ],
                "tags": [
                    "equipment"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/equipment_families/": {
            "get": {
                "operationId": "equipment_families_list",
                "description": "\nEquipment Families group together the general properties of a type of Equipment.\nEach Equipment is associated with an Equipment Family.\n\nSearchable fields:\n- type\n- manufacturer\n- form_factor\n        ",
                "summary": "View Equipment Families",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "equipment_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedEquipmentFamilyList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "equipment_families_create",
                "description": "\nEquipment Families group together the general properties of a type of Equipment.\nEach Equipment is associated with an Equipment Family.\n        ",
                "summary": "Create an Equipment Family",
                "tags": [
                    "equipment_families"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentFamily"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentFamily"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentFamily"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/equipment_families/{uuid}/": {
            "get": {
                "operationId": "equipment_families_retrieve",
                "description": "\nEquipment Families group together the general properties of a type of Equipment.\nEach Equipment is associated with an Equipment Family.\n        ",
                "summary": "View an Equipment Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this equipment family.",
                        "required": true
                    }
                ],
                "tags": [
                    "equipment_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "equipment_families_partial_update",
                "description": "\nEquipment Families that do not have any Equipment associated with them may be edited.\nEquipment Families that _do_ have Equipment associated with them are locked,\nto prevent accidental updating.\n        ",
                "summary": "Update an Equipment Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this equipment family.",
                        "required": true
                    }
                ],
                "tags": [
                    "equipment_families"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEquipmentFamily"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEquipmentFamily"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedEquipmentFamily"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "equipment_families_destroy",
                "description": "\nEquipment Families that do not have any Equipment associated with them may be deleted.\nEquipment Families that _do_ have Equipment associated with them are locked,\nto prevent accidental updating.\n        ",
                "summary": "Delete an Equipment Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this equipment family.",
                        "required": true
                    }
                ],
                "tags": [
                    "equipment_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/equipment_manufacturers/": {
            "get": {
                "operationId": "equipment_manufacturers_list",
                "description": "Equipment Manufacturers are used to describe the manufacturer of equipment used in an experiment.\nExamples are \"Arbin\", \"Maccor\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "equipment_manufacturers"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/equipment_models/": {
            "get": {
                "operationId": "equipment_models_list",
                "description": "Equipment Models are used to describe the model of equipment used in an experiment.\nExamples are \"BT-2000\", \"BT-2043\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "equipment_models"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/equipment_types/": {
            "get": {
                "operationId": "equipment_types_list",
                "description": "Equipment Types are used to describe the type of equipment used in an experiment.\nExamples are \"Thermal Chamber\", \"Cycler\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "equipment_types"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/experiments/": {
            "get": {
                "operationId": "experiments_list",
                "description": "\nExperiments are collections of Cycler Tests which are grouped together for analysis.\n        ",
                "summary": "View Experiments",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "experiments"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedExperimentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "experiments_create",
                "description": "\nExperiments are collections of Cycler Tests which are grouped together for analysis.\n        ",
                "summary": "Create an Experiment",
                "tags": [
                    "experiments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Experiment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Experiment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Experiment"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Experiment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/experiments/{uuid}/": {
            "get": {
                "operationId": "experiments_retrieve",
                "description": "\nExperiments are collections of Cycler Tests which are grouped together for analysis.\n        ",
                "summary": "View an Experiment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this experiment.",
                        "required": true
                    }
                ],
                "tags": [
                    "experiments"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Experiment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "experiments_partial_update",
                "description": "Experiments are collections of Cycler Tests which are grouped together for analysis.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this experiment.",
                        "required": true
                    }
                ],
                "tags": [
                    "experiments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedExperiment"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedExperiment"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedExperiment"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Experiment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "experiments_destroy",
                "description": "Experiments are collections of Cycler Tests which are grouped together for analysis.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this experiment.",
                        "required": true
                    }
                ],
                "tags": [
                    "experiments"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/files/": {
            "get": {
                "operationId": "files_list",
                "description": "\nFiles are files in a directory marked as a monitored Path for a Harvester.\n\nThey are reported to Galv by the harvester program.\nAn File will have file metadata (size, modification time), and a\nstatus representing its import state. It may be linked to HarvestErrors\nencountered while importing the file, and/or to Datasets representing the content\nof imported files.\n\nYou can see all files on any Path on which you are an Administrator or User.\nHarvester Administrators have access to all Files on the Harvester's Paths.\n\nSearchable fields:\n- path\n- state\n        ",
                "summary": "View Files on a Path you can access",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "files"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedObservedFileList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/files/{uuid}/": {
            "get": {
                "operationId": "files_retrieve",
                "description": "\nFiles are files in a directory marked as a monitored Path for a Harvester.\n        ",
                "summary": "View a File",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this observed file.",
                        "required": true
                    }
                ],
                "tags": [
                    "files"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObservedFile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "files_partial_update",
                "description": "ObservedFiles are files that exist (or have existed) in a MonitoredPath and have\nbeen reported to Galv by the Harvester.\n\nAn ObservedFile instance will have file metadata (size, modification time), and a\nstatus representing its import state. It may be linked to HarvestErrors\nencountered while importing the file, and/or to Datasets representing the content\nof imported files.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this observed file.",
                        "required": true
                    }
                ],
                "tags": [
                    "files"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedObservedFile"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedObservedFile"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedObservedFile"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObservedFile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/files/{uuid}/reimport/": {
            "get": {
                "operationId": "files_reimport_retrieve",
                "description": "\nA File will usually only be imported once, provided it is created, written to,\nand then left alone. Files will naturally be reimported if they grow in size\nagain.\nIf an error was encountered while processing a file, or you have other reasons\nfor wishing to repeat the import process, you can use this endpoint to force the\nharvester program to rerun the import process when it next scans the file.\n\n*Note*: This request may be overwritten if the file changes size before it is next scanned.\n        ",
                "summary": "Force a File to be re-imported",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this observed file.",
                        "required": true
                    }
                ],
                "tags": [
                    "files"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObservedFile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/groups/": {
            "get": {
                "operationId": "groups_list",
                "description": "Groups are Django Group instances custom-serialized for convenience.",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "groups"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedGroupList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/groups/{id}/": {
            "get": {
                "operationId": "groups_retrieve",
                "description": "Groups are Django Group instances custom-serialized for convenience.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this group proxy.",
                        "required": true
                    }
                ],
                "tags": [
                    "groups"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "groups_partial_update",
                "description": "Groups are Django Group instances custom-serialized for convenience.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this group proxy.",
                        "required": true
                    }
                ],
                "tags": [
                    "groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedGroup"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedGroup"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedGroup"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/harvest_errors/": {
            "get": {
                "operationId": "harvest_errors_list",
                "description": "\nView the Errors encountered by Harvesters to which you have access.\n\nHarvesters report errors when they encounter them, either in crawling or in processing files.\nIf a File or Dataset is not appearing on a Path where you think it should be, this is the first place to check.\n\nSearchable fields:\n- error\n        ",
                "summary": "View Errors encountered while Harvesting",
                "parameters": [
                    {
                        "in": "query",
                        "name": "file",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "harvester",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "harvest_errors"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedHarvestErrorList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/harvest_errors/{id}/": {
            "get": {
                "operationId": "harvest_errors_retrieve",
                "description": "\nView an Error reported by a Harvester.\n        ",
                "summary": "View Error details",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this harvest error.",
                        "required": true
                    }
                ],
                "tags": [
                    "harvest_errors"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HarvestError"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/harvesters/": {
            "get": {
                "operationId": "harvesters_list",
                "description": "\nHarvesters monitor a set of MonitoredPaths and send reports about ObservedFiles within those paths.\nYou can view all Harvesters for any Labs you are a member of.\n\nSearchable fields:\n- name\n        ",
                "summary": "View all Harvesters",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "harvesters"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedHarvesterList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/harvesters/{uuid}/": {
            "get": {
                "operationId": "harvesters_retrieve",
                "description": "\nHarvesters monitor a set of MonitoredPaths and send reports about ObservedFiles within those paths.\n        ",
                "summary": "View a single Harvester",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this harvester.",
                        "required": true
                    }
                ],
                "tags": [
                    "harvesters"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Harvester"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "harvesters_partial_update",
                "description": "\nSome Harvester details can be updated after the Harvester is created.\nThose details are updated using this endpoint.\n\nOnly Harvester Administrators are authorised to make these changes.\n        ",
                "summary": "Update Harvester details",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this harvester.",
                        "required": true
                    }
                ],
                "tags": [
                    "harvesters"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedHarvester"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedHarvester"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedHarvester"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Harvester"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/labs/": {
            "get": {
                "operationId": "labs_list",
                "description": "\nLabs are collections of Teams that provide for wider-scale access management and administration.\n",
                "summary": "View all Labs",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "labs"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedLabList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "labs_create",
                "description": "\nLabs are collections of Teams that provide for wider-scale access management and administration.\n",
                "summary": "Create a new Lab",
                "tags": [
                    "labs"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Lab"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Lab"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Lab"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Lab"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/labs/{id}/": {
            "get": {
                "operationId": "labs_retrieve",
                "description": "\nLabs are collections of Teams that provide for wider-scale access management and administration.\n",
                "summary": "View a single Lab",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this lab.",
                        "required": true
                    }
                ],
                "tags": [
                    "labs"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Lab"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "labs_partial_update",
                "description": "\nLabs are collections of Teams that provide for wider-scale access management and administration.\n",
                "summary": "Update a Lab",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this lab.",
                        "required": true
                    }
                ],
                "tags": [
                    "labs"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLab"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLab"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLab"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Lab"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "labs_destroy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this lab.",
                        "required": true
                    }
                ],
                "tags": [
                    "labs"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/login/": {
            "post": {
                "operationId": "login_create",
                "description": "\nSign in with a username and password to obtain an API Token.\nThe token will allow you access to appropriate parts of the API in subsequent requests.\n\nSubsequent requests should include the Authorization header with the content `Bearer token`\nwhere token is the token you received in exchange for your credentials here.\n    ",
                "summary": "Log in to retrieve an API Token for use elsewhere in the API.",
                "tags": [
                    "login"
                ],
                "security": [
                    {
                        "basicAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KnoxUser"
                                }
                            }
                        },
                        "description": ""
                    },
                    "401": {
                        "description": "Invalid username/password"
                    }
                }
            }
        },
        "/monitored_paths/": {
            "get": {
                "operationId": "monitored_paths_list",
                "description": "\nA Path refers to a directory accessible by a Harvester in which\ndata files will reside. Those files will be scanned periodically by the Harvester,\nbecoming ObservedFiles once they are reported to Galv by the Harvester.\n\nPaths can be created or updated by a Harvester's admins and users, as\nwell as any users who have been given explicit permissions to edit the MonitoredPath.\n\nSearchable fields:\n- path\n        ",
                "summary": "View Paths to which you have access",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "monitored_paths"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMonitoredPathList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "monitored_paths_create",
                "description": "\nRegister a new directory on for a Harvester to crawl.\nFiles in that directory will be scanned periodically by the Harvester,\nbecoming ObservedFiles once they are reported to Galv by the Harvester.\n        ",
                "summary": "Create a new Path",
                "tags": [
                    "monitored_paths"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MonitoredPath"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/MonitoredPath"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MonitoredPath"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MonitoredPath"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/monitored_paths/{uuid}/": {
            "get": {
                "operationId": "monitored_paths_retrieve",
                "description": "\nA Path refers to a directory accessible by a Harvester in which\ndata files will reside. Those files will be scanned periodically by the Harvester,\nbecoming ObservedFiles once they are reported to Galv by the Harvester.\n        ",
                "summary": "View the details of a Path",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this monitored path.",
                        "required": true
                    }
                ],
                "tags": [
                    "monitored_paths"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MonitoredPath"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "monitored_paths_partial_update",
                "description": "\nAlter the path to the monitored directory,\nor the time for which files need to be stable before being imported.\n        ",
                "summary": "Update a Path",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this monitored path.",
                        "required": true
                    }
                ],
                "tags": [
                    "monitored_paths"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMonitoredPath"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMonitoredPath"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedMonitoredPath"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MonitoredPath"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "monitored_paths_destroy",
                "description": "\nDelete a directory from a Harvester's list of directories to crawl.\nFiles in that directory will no longer be scanned periodically by the Harvester,\nand will no longer become ObservedFiles once they are reported to Galv by the Harvester.\n        ",
                "summary": "Delete a Path",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this monitored path.",
                        "required": true
                    }
                ],
                "tags": [
                    "monitored_paths"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/schedule_families/": {
            "get": {
                "operationId": "schedule_families_list",
                "description": "\nEquipment Families group together the general properties of a type of Equipment.\nEach Equipment is associated with an Equipment Family.\n\nSearchable fields:\n- type\n- manufacturer\n- form_factor\n        ",
                "summary": "View Equipment Families",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "schedule_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedScheduleFamilyList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "schedule_families_create",
                "description": "\nSchedule Families group together the general properties of a type of Schedule.\nEach Schedule is associated with a Schedule Family.\n        ",
                "summary": "Create a Schedule Family",
                "tags": [
                    "schedule_families"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleFamily"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleFamily"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleFamily"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScheduleFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/schedule_families/{uuid}/": {
            "get": {
                "operationId": "schedule_families_retrieve",
                "description": "\nSchedule Families group together the general properties of a type of Schedule.\nEach Schedule is associated with a Schedule Family.\n        ",
                "summary": "View a Schedule Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule family.",
                        "required": true
                    }
                ],
                "tags": [
                    "schedule_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScheduleFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "schedule_families_partial_update",
                "description": "\nSchedule Families that do not have a Schedule associated with them may be edited.\nSchedule Families that _do_ have Schedule associated with them are locked,\nto prevent accidental updating.\n        ",
                "summary": "Update a Schedule Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule family.",
                        "required": true
                    }
                ],
                "tags": [
                    "schedule_families"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedScheduleFamily"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedScheduleFamily"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedScheduleFamily"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScheduleFamily"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "schedule_families_destroy",
                "description": "\nSchedule Families that do not have a Schedule associated with them may be deleted.\nSchedule Families that _do_ have Schedule associated with them are locked,\nto prevent accidental updating.\n        ",
                "summary": "Delete a Schedule Family",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule family.",
                        "required": true
                    }
                ],
                "tags": [
                    "schedule_families"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/schedule_identifiers/": {
            "get": {
                "operationId": "schedule_identifiers_list",
                "description": "Schedule Identifiers are used to describe the type of schedule used in an experiment.\nExamples are \"Cell Conditioning\", \"Pseudo-OCV\".",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "schedule_identifiers"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "next": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=400&limit=100"
                                        },
                                        "previous": {
                                            "type": "string",
                                            "nullable": true,
                                            "format": "uri",
                                            "example": "http://api.example.org/accounts/?offset=200&limit=100"
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/schedules/": {
            "get": {
                "operationId": "schedules_list",
                "description": "\nSchedule used in experiments which generate Files and their Datasets.\n\nSearchable fields:\n- identifier\n- description\n        ",
                "summary": "View Schedule",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "schedules"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedScheduleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "schedules_create",
                "description": "\nCreate a Schedule by describing its role and purpose.\n        ",
                "summary": "Create Schedule",
                "tags": [
                    "schedules"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Schedule"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Schedule"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Schedule"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/schedules/{uuid}/": {
            "get": {
                "operationId": "schedules_retrieve",
                "description": "\nSchedule used in experiments which generate Files and their Datasets.\n        ",
                "summary": "View specific Schedule",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule.",
                        "required": true
                    }
                ],
                "tags": [
                    "schedules"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "schedules_partial_update",
                "description": "\nSchedules that is not used in Cycler Tests may be edited.\nSchedules that _is_ used in a Cycler Tests is locked to prevent accidental updating.\n        ",
                "summary": "Update Schedule",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule.",
                        "required": true
                    }
                ],
                "tags": [
                    "schedules"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSchedule"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSchedule"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSchedule"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "schedules_destroy",
                "description": "\nSchedules that is not used in Cycler Tests may be deleted.\nSchedules that _is_ used in a Cycler Tests is locked to prevent accidental updating.\n        ",
                "summary": "Delete Schedule",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule.",
                        "required": true
                    }
                ],
                "tags": [
                    "schedules"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/schema_validations/": {
            "get": {
                "operationId": "schema_validations_list",
                "description": "List SchemaValidations, optionally filtering by schema, object, or content type.",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "schema_validations"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSchemaValidationList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/schema_validations/{id}/": {
            "get": {
                "operationId": "schema_validations_retrieve",
                "description": "SchemaValidations are the results of validating Galv objects against ValidationSchemas.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this schema validation.",
                        "required": true
                    }
                ],
                "tags": [
                    "schema_validations"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchemaValidation"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/teams/": {
            "get": {
                "operationId": "teams_list",
                "description": "\nTeams are groups of Users who share Resources.\n",
                "summary": "View all Labs",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "teams"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedTeamList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "teams_create",
                "description": "\nTeams are groups of Users who share Resources.\n",
                "summary": "Create a new Lab",
                "tags": [
                    "teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Team"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Team"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Team"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/teams/{id}/": {
            "get": {
                "operationId": "teams_retrieve",
                "description": "\nTeams are groups of Users who share Resources.\n",
                "summary": "View a single Lab",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this team.",
                        "required": true
                    }
                ],
                "tags": [
                    "teams"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "teams_partial_update",
                "description": "\nTeams are groups of Users who share Resources.\n",
                "summary": "Update a Lab",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this team.",
                        "required": true
                    }
                ],
                "tags": [
                    "teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTeam"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTeam"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTeam"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "teams_destroy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this team.",
                        "required": true
                    }
                ],
                "tags": [
                    "teams"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/tokens/": {
            "get": {
                "operationId": "tokens_list",
                "description": "\nList all API tokens associated with this user account.\nYou will not be able to see the value of the tokens themselves,\nbecause these values are encrypted, but you can see the names you gave them and their expiry dates.\n\nNew Tokens cannot be created at this endpoint, use /create_token/ instead.\n        ",
                "summary": "View tokens associated with your account.",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "tokens"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedKnoxTokenList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/tokens/{id}/": {
            "get": {
                "operationId": "tokens_retrieve",
                "description": "\nYou will not be able to see the value of the token,\nbut you can see the name you gave it and its creation/expiry date.\n        ",
                "summary": "View a token associated with your account.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this knox auth token.",
                        "required": true
                    }
                ],
                "tags": [
                    "tokens"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KnoxToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tokens_partial_update",
                "description": "\nToken values and expiry dates are immutable, but you can change the name you\nassociated with a token.\n        ",
                "summary": "Change the name of a token associated with your account.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this knox auth token.",
                        "required": true
                    }
                ],
                "tags": [
                    "tokens"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedKnoxToken"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedKnoxToken"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedKnoxToken"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KnoxToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tokens_destroy",
                "description": "\nRevoking a token renders that token invalid for authenticating requests to the API.\nIf you have tokens that are no longer needed, or that have been leaked (for example\nby being included in a public Git Repository), you can should revoke them so that\nother people cannot use them to access the API under your credentials.\n        ",
                "summary": "Revoke a token associated with your account.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this knox auth token.",
                        "required": true
                    }
                ],
                "tags": [
                    "tokens"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/units/": {
            "get": {
                "operationId": "units_list",
                "description": "\nUnits are scientific (typically SI) units which describe how data map to quantities in the world.\nSome Units are predefined (e.g. seconds, volts, amps, unitless quantities),\nwhile others can be defined in experimental data.\n\nSearchable fields:\n- name\n- symbol\n- description\n        ",
                "summary": "View Units",
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_default",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "symbol",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "units"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDataUnitList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/units/{id}/": {
            "get": {
                "operationId": "units_retrieve",
                "description": "\nUnits are scientific (typically SI) units which describe how data map to quantities in the world.\nSome Units are predefined (e.g. seconds, volts, amps, unitless quantities),\nwhile others can be defined in experimental data.\n        ",
                "summary": "View a Unit",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this data unit.",
                        "required": true
                    }
                ],
                "tags": [
                    "units"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataUnit"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "operationId": "users_list",
                "description": "Users are Django User instances custom-serialized for convenience.",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedUserList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "users_create",
                "description": "Users are Django User instances custom-serialized for convenience.",
                "tags": [
                    "users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/users/{id}/": {
            "get": {
                "operationId": "users_retrieve",
                "description": "Users are Django User instances custom-serialized for convenience.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this user proxy.",
                        "required": true
                    }
                ],
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "users_partial_update",
                "description": "\nYour User profile can be updated. You may change your email address and password.\nAll changes require your current password to be accepted.\n        ",
                "summary": "Update User profile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this user proxy.",
                        "required": true
                    }
                ],
                "tags": [
                    "users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdate"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdate"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdate"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": ""
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/validation_schemas/": {
            "get": {
                "operationId": "validation_schemas_list",
                "description": "\nValidation schemas contain one or more definitions that describe requirements for Galv objects.\nThe possible values are available at `/keys/` and should be implemented in your schema thus:\n\n```json\n{\n    ...\n    \"$defs\": {\n        \"key_name\": {\n            ... description\n        },\n        ... and so on for any other keys\n    },\n    ...\n```\n\nFor each of these schemas that is enabled, Galv will test the objects against the definition\nby constructing a JSON Schema file that hooks in your definitions and asserts a single object.\nThis means you need not specify a root object (e.g. with `\"type\": \"object\"`) in your schema.\n\n```json\n{\n    ...\n    \"type\": {\"$ref\": \"#/$defs/key_name\"}\n}\n```\n\nBecause your definitions are included locally, you can include references to other definitions in your schema, \nand Galv will automatically resolve them for you.\n\nGalv will highlight any objects that do not meet the requirements.\nThis can allow you to specify a series of increasingly strict requirements for your lab's metadata.\n\nSchemas are validated against _individually_, and are not checked for consistency.\nIf you declare that a particular field is a `string` in one schema and a `number` in another, \nGalv will not complain, except to issue a warning for failing to adhere to one or the other schema.\n\nBecause schemas validate objects returned from the Galv API, \nschemas should expect most relational fields to be represented as URLs. \n\nNote: there are some requirements put in place by Galv's database structure. \nThese will always apply, and will generate errors rather than warnings.\n",
                "summary": "List all Validation Schemas",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The initial index from which to return the results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "validation_schemas"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedValidationSchemaList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "validation_schemas_create",
                "tags": [
                    "validation_schemas"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationSchema"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationSchema"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationSchema"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationSchema"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/validation_schemas/{uuid}/": {
            "get": {
                "operationId": "validation_schemas_retrieve",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this validation schema.",
                        "required": true
                    }
                ],
                "tags": [
                    "validation_schemas"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationSchema"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "validation_schemas_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this validation schema.",
                        "required": true
                    }
                ],
                "tags": [
                    "validation_schemas"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationSchema"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationSchema"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidationSchema"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationSchema"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "validation_schemas_partial_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this validation schema.",
                        "required": true
                    }
                ],
                "tags": [
                    "validation_schemas"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedValidationSchema"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedValidationSchema"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedValidationSchema"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationSchema"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "validation_schemas_destroy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this validation schema.",
                        "required": true
                    }
                ],
                "tags": [
                    "validation_schemas"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/validation_schemas/keys/": {
            "get": {
                "operationId": "validation_schemas_keys_retrieve",
                "description": "\nValidation schemas contain one or more root properties that describe requirements for Galv objects.\nThis endpoint provides the names and list URLs for each Galv object that can be validated against a schema.\n        ",
                "summary": "Keys available for validation schemas",
                "tags": [
                    "validation_schemas"
                ],
                "security": [
                    {
                        "knoxTokenAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {
                        "harvesterAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationSchemaRootKeys"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Cell": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier (e.g. serial number) for the cell"
                    },
                    "family": {
                        "type": "string",
                        "format": "uri",
                        "description": "Cell Family this Cell belongs to"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests using this Cell"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "cycler_tests",
                    "family",
                    "identifier",
                    "in_use",
                    "permissions",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "CellFamily": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "manufacturer": {
                        "type": "string",
                        "description": "Manufacturer name"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model number"
                    },
                    "datasheet": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Link to the datasheet",
                        "maxLength": 200
                    },
                    "chemistry": {
                        "type": "string",
                        "description": "Chemistry type"
                    },
                    "nominal_voltage": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Nominal voltage of the cells (in volts)"
                    },
                    "nominal_capacity": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Nominal capacity of the cells (in amp hours)"
                    },
                    "initial_ac_impedance": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Initial AC impedance of the cells (in ohms)"
                    },
                    "initial_dc_resistance": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Initial DC resistance of the cells (in ohms)"
                    },
                    "energy_density": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Energy density of the cells (in watt hours per kilogram)"
                    },
                    "power_density": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Power density of the cells (in watts per kilogram)"
                    },
                    "form_factor": {
                        "type": "string",
                        "description": "Physical form factor"
                    },
                    "cells": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cells belonging to this Cell Family"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "cells",
                    "chemistry",
                    "form_factor",
                    "in_use",
                    "manufacturer",
                    "model",
                    "permissions",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "CreateKnoxToken": {
                "type": "object",
                "properties": {
                    "ttl": {
                        "type": "integer",
                        "description": "Time to live (s)"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CyclerTest": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "cell": {
                        "type": "string",
                        "format": "uri",
                        "description": "Cell this Cycler Test uses"
                    },
                    "equipment": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Equipment this Cycler Test uses"
                    },
                    "schedule": {
                        "type": "string",
                        "format": "uri",
                        "description": "Schedule this Cycler Test uses"
                    },
                    "rendered_schedule": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Rendered schedule"
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "cell",
                    "equipment",
                    "permissions",
                    "rendered_schedule",
                    "schedule",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "DataColumn": {
                "type": "object",
                "description": "A column contains metadata and data. Data are an ordered list of values.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Column name (assigned by harvester but overridden by Galv for core fields)"
                    },
                    "name_in_file": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Column title e.g. in .tsv file headers"
                    },
                    "is_required_column": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the column is one of those required by Galv"
                    },
                    "file": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "File this Column belongs to"
                    },
                    "data_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Type of the data in this column"
                    },
                    "type_name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Human-friendly identifier"
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Origins and purpose"
                    },
                    "unit": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "readOnly": true,
                        "description": "Unit used for measuring the values in this column"
                    },
                    "values": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Column values"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "data_type",
                    "description",
                    "file",
                    "id",
                    "is_required_column",
                    "name",
                    "name_in_file",
                    "permissions",
                    "type_name",
                    "unit",
                    "url",
                    "values"
                ]
            },
            "DataColumnType": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly identifier"
                    },
                    "description": {
                        "type": "string",
                        "description": "Origins and purpose"
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "Whether the Column is included in the initial list of known Column Types"
                    },
                    "unit": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Unit used for measuring the values in this column"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "permissions",
                    "unit",
                    "url"
                ]
            },
            "DataUnit": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Common name"
                    },
                    "symbol": {
                        "type": "string",
                        "description": "Symbol"
                    },
                    "description": {
                        "type": "string",
                        "description": "What the Unit signifies, and how it is used"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "permissions",
                    "symbol",
                    "url"
                ]
            },
            "Equipment": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier (e.g. serial number) for the equipment"
                    },
                    "family": {
                        "type": "string",
                        "format": "uri",
                        "description": "Equipment Family this Equipment belongs to"
                    },
                    "calibration_date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true,
                        "description": "Date of last calibration"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests using this Equipment"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "cycler_tests",
                    "family",
                    "identifier",
                    "in_use",
                    "permissions",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "EquipmentFamily": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Equipment type"
                    },
                    "manufacturer": {
                        "type": "string",
                        "description": "Manufacturer name"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model number"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "equipment": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Equipment belonging to this Equipment Family"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "equipment",
                    "in_use",
                    "manufacturer",
                    "model",
                    "permissions",
                    "team",
                    "type",
                    "url",
                    "uuid"
                ]
            },
            "Error": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "Description of the error"
                    }
                },
                "required": [
                    "error"
                ]
            },
            "Experiment": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the experiment"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the experiment"
                    },
                    "authors": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Users who created this Experiment"
                    },
                    "protocol": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "description": "Protocol of the experiment"
                    },
                    "protocol_file": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Protocol file of the experiment"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Cycler Tests using this Experiment"
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "authors",
                    "cycler_tests",
                    "permissions",
                    "team",
                    "title",
                    "url",
                    "uuid"
                ]
            },
            "Group": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Users in the group"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "add_users": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri",
                            "writeOnly": true
                        },
                        "writeOnly": true,
                        "description": "Users to add"
                    },
                    "remove_users": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri",
                            "writeOnly": true
                        },
                        "writeOnly": true,
                        "description": "Users to remove"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "permissions",
                    "url",
                    "users"
                ]
            },
            "HarvestError": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "harvester": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Harvester this HarvestError belongs to"
                    },
                    "file": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "File this HarvestError belongs to"
                    },
                    "error": {
                        "type": "string",
                        "description": "Text of the error report"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Date and time error was logged in the database"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "error",
                    "file",
                    "harvester",
                    "id",
                    "permissions",
                    "timestamp",
                    "url"
                ]
            },
            "Harvester": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "last_check_in": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Date and time of last Harvester contact"
                    },
                    "lab": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Lab this Harvester belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly Harvester identifier"
                    },
                    "sleep_time": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Seconds to sleep between Harvester cycles"
                    },
                    "environment_variables": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Environment variables set on this Harvester"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the Harvester is active"
                    }
                },
                "required": [
                    "environment_variables",
                    "lab",
                    "last_check_in",
                    "name",
                    "permissions",
                    "url",
                    "uuid"
                ]
            },
            "KnoxToken": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Convenient human-friendly name"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date and time of creation"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Date and time token expires (blank = never)"
                    }
                },
                "required": [
                    "created",
                    "expiry",
                    "id",
                    "name",
                    "url"
                ]
            },
            "KnoxTokenFull": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Convenient human-friendly name"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date and time of creation"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Date and time token expires (blank = never)"
                    },
                    "token": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Token value"
                    }
                },
                "required": [
                    "created",
                    "expiry",
                    "id",
                    "name",
                    "token",
                    "url"
                ]
            },
            "KnoxUser": {
                "type": "object",
                "properties": {
                    "expiry": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "token": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "required": [
                    "expiry",
                    "token",
                    "user"
                ]
            },
            "Lab": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly Lab identifier"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the Lab"
                    },
                    "admin_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "description": "Group of users who can edit this Lab"
                    },
                    "harvesters": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Teams in this Lab"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "admin_group",
                    "harvesters",
                    "id",
                    "name",
                    "permissions",
                    "teams",
                    "url"
                ]
            },
            "MonitoredPath": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Directory location on Harvester"
                    },
                    "regex": {
                        "type": "string",
                        "nullable": true,
                        "description": "\n    Python.re regular expression to filter files by, \n    applied to full file name starting from this Path's directory"
                    },
                    "stable_time": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Number of seconds files must remain stable to be processed"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Files on this MonitoredPath"
                    },
                    "harvester": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Harvester this MonitoredPath is on"
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Team this MonitoredPath belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "files",
                    "harvester",
                    "path",
                    "permissions",
                    "regex",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "ObservedFile": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "harvester": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Harvester this File belongs to"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Name of the file"
                    },
                    "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Absolute file path"
                    },
                    "state": {
                        "enum": [
                            "RETRY IMPORT",
                            "IMPORT FAILED",
                            "UNSTABLE",
                            "GROWING",
                            "STABLE",
                            "IMPORTING",
                            "IMPORTED"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "File status; autogenerated but can be manually set to RETRY IMPORT"
                    },
                    "parser": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Parser used by the harvester"
                    },
                    "num_rows": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Number of rows in the file"
                    },
                    "first_sample_no": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Number of the first sample in the file"
                    },
                    "last_sample_no": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Number of the last sample in the file"
                    },
                    "extra_metadata": {
                        "type": "object",
                        "additionalProperties": {},
                        "readOnly": true,
                        "nullable": true,
                        "description": "Extra metadata from the harvester"
                    },
                    "has_required_columns": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the file has all required columns"
                    },
                    "last_observed_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Date and time of last Harvester report on file"
                    },
                    "last_observed_size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file as last reported by Harvester"
                    },
                    "upload_errors": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Errors associated with this File"
                    },
                    "column_errors": {
                        "type": "array",
                        "items": {},
                        "readOnly": true,
                        "description": "Errors in uploaded columns"
                    },
                    "upload_info": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "readOnly": true,
                        "description": "Metadata required for harvester program to resume file parsing"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Columns extracted from this File"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "column_errors",
                    "columns",
                    "extra_metadata",
                    "first_sample_no",
                    "harvester",
                    "has_required_columns",
                    "last_observed_size",
                    "last_observed_time",
                    "last_sample_no",
                    "name",
                    "num_rows",
                    "parser",
                    "path",
                    "permissions",
                    "state",
                    "upload_errors",
                    "upload_info",
                    "url",
                    "uuid"
                ]
            },
            "PaginatedCellFamilyList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CellFamily"
                        }
                    }
                }
            },
            "PaginatedCellList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Cell"
                        }
                    }
                }
            },
            "PaginatedCyclerTestList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CyclerTest"
                        }
                    }
                }
            },
            "PaginatedDataColumnList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataColumn"
                        }
                    }
                }
            },
            "PaginatedDataColumnTypeList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataColumnType"
                        }
                    }
                }
            },
            "PaginatedDataUnitList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataUnit"
                        }
                    }
                }
            },
            "PaginatedEquipmentFamilyList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EquipmentFamily"
                        }
                    }
                }
            },
            "PaginatedEquipmentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Equipment"
                        }
                    }
                }
            },
            "PaginatedExperimentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Experiment"
                        }
                    }
                }
            },
            "PaginatedGroupList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        }
                    }
                }
            },
            "PaginatedHarvestErrorList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HarvestError"
                        }
                    }
                }
            },
            "PaginatedHarvesterList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Harvester"
                        }
                    }
                }
            },
            "PaginatedKnoxTokenList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KnoxToken"
                        }
                    }
                }
            },
            "PaginatedLabList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Lab"
                        }
                    }
                }
            },
            "PaginatedMonitoredPathList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonitoredPath"
                        }
                    }
                }
            },
            "PaginatedObservedFileList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObservedFile"
                        }
                    }
                }
            },
            "PaginatedScheduleFamilyList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScheduleFamily"
                        }
                    }
                }
            },
            "PaginatedScheduleList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Schedule"
                        }
                    }
                }
            },
            "PaginatedSchemaValidationList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SchemaValidation"
                        }
                    }
                }
            },
            "PaginatedTeamList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Team"
                        }
                    }
                }
            },
            "PaginatedUserList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            },
            "PaginatedValidationSchemaList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=400&limit=100"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?offset=200&limit=100"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationSchema"
                        }
                    }
                }
            },
            "PatchedCell": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier (e.g. serial number) for the cell"
                    },
                    "family": {
                        "type": "string",
                        "format": "uri",
                        "description": "Cell Family this Cell belongs to"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests using this Cell"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedCellFamily": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "manufacturer": {
                        "type": "string",
                        "description": "Manufacturer name"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model number"
                    },
                    "datasheet": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Link to the datasheet",
                        "maxLength": 200
                    },
                    "chemistry": {
                        "type": "string",
                        "description": "Chemistry type"
                    },
                    "nominal_voltage": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Nominal voltage of the cells (in volts)"
                    },
                    "nominal_capacity": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Nominal capacity of the cells (in amp hours)"
                    },
                    "initial_ac_impedance": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Initial AC impedance of the cells (in ohms)"
                    },
                    "initial_dc_resistance": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Initial DC resistance of the cells (in ohms)"
                    },
                    "energy_density": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Energy density of the cells (in watt hours per kilogram)"
                    },
                    "power_density": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Power density of the cells (in watts per kilogram)"
                    },
                    "form_factor": {
                        "type": "string",
                        "description": "Physical form factor"
                    },
                    "cells": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cells belonging to this Cell Family"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedCyclerTest": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "cell": {
                        "type": "string",
                        "format": "uri",
                        "description": "Cell this Cycler Test uses"
                    },
                    "equipment": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Equipment this Cycler Test uses"
                    },
                    "schedule": {
                        "type": "string",
                        "format": "uri",
                        "description": "Schedule this Cycler Test uses"
                    },
                    "rendered_schedule": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Rendered schedule"
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedEquipment": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier (e.g. serial number) for the equipment"
                    },
                    "family": {
                        "type": "string",
                        "format": "uri",
                        "description": "Equipment Family this Equipment belongs to"
                    },
                    "calibration_date": {
                        "type": "string",
                        "format": "date",
                        "nullable": true,
                        "description": "Date of last calibration"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests using this Equipment"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedEquipmentFamily": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Equipment type"
                    },
                    "manufacturer": {
                        "type": "string",
                        "description": "Manufacturer name"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model number"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "equipment": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Equipment belonging to this Equipment Family"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedExperiment": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the experiment"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the experiment"
                    },
                    "authors": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Users who created this Experiment"
                    },
                    "protocol": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "description": "Protocol of the experiment"
                    },
                    "protocol_file": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Protocol file of the experiment"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Cycler Tests using this Experiment"
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Users in the group"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "add_users": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri",
                            "writeOnly": true
                        },
                        "writeOnly": true,
                        "description": "Users to add"
                    },
                    "remove_users": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri",
                            "writeOnly": true
                        },
                        "writeOnly": true,
                        "description": "Users to remove"
                    }
                }
            },
            "PatchedHarvester": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "last_check_in": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Date and time of last Harvester contact"
                    },
                    "lab": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Lab this Harvester belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly Harvester identifier"
                    },
                    "sleep_time": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Seconds to sleep between Harvester cycles"
                    },
                    "environment_variables": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Environment variables set on this Harvester"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether the Harvester is active"
                    }
                }
            },
            "PatchedKnoxToken": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Convenient human-friendly name"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date and time of creation"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Date and time token expires (blank = never)"
                    }
                }
            },
            "PatchedLab": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly Lab identifier"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the Lab"
                    },
                    "admin_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "description": "Group of users who can edit this Lab"
                    },
                    "harvesters": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Teams in this Lab"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedMonitoredPath": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Directory location on Harvester"
                    },
                    "regex": {
                        "type": "string",
                        "nullable": true,
                        "description": "\n    Python.re regular expression to filter files by, \n    applied to full file name starting from this Path's directory"
                    },
                    "stable_time": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Number of seconds files must remain stable to be processed"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Files on this MonitoredPath"
                    },
                    "harvester": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Harvester this MonitoredPath is on"
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Team this MonitoredPath belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedObservedFile": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "harvester": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Harvester this File belongs to"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Name of the file"
                    },
                    "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Absolute file path"
                    },
                    "state": {
                        "enum": [
                            "RETRY IMPORT",
                            "IMPORT FAILED",
                            "UNSTABLE",
                            "GROWING",
                            "STABLE",
                            "IMPORTING",
                            "IMPORTED"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "File status; autogenerated but can be manually set to RETRY IMPORT"
                    },
                    "parser": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Parser used by the harvester"
                    },
                    "num_rows": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Number of rows in the file"
                    },
                    "first_sample_no": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Number of the first sample in the file"
                    },
                    "last_sample_no": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Number of the last sample in the file"
                    },
                    "extra_metadata": {
                        "type": "object",
                        "additionalProperties": {},
                        "readOnly": true,
                        "nullable": true,
                        "description": "Extra metadata from the harvester"
                    },
                    "has_required_columns": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the file has all required columns"
                    },
                    "last_observed_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Date and time of last Harvester report on file"
                    },
                    "last_observed_size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file as last reported by Harvester"
                    },
                    "upload_errors": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Errors associated with this File"
                    },
                    "column_errors": {
                        "type": "array",
                        "items": {},
                        "readOnly": true,
                        "description": "Errors in uploaded columns"
                    },
                    "upload_info": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "readOnly": true,
                        "description": "Metadata required for harvester program to resume file parsing"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Columns extracted from this File"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedSchedule": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "family": {
                        "type": "string",
                        "format": "uri",
                        "description": "Schedule Family this Schedule belongs to"
                    },
                    "schedule_file": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "File containing the schedule"
                    },
                    "pybamm_schedule_variables": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "description": "Variables used in the PyBaMM.Experiment representation of the schedule"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests using this Schedule"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedScheduleFamily": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the schedule"
                    },
                    "ambient_temperature": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Ambient temperature during the experiment (in degrees Celsius)"
                    },
                    "pybamm_template": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "description": "Template for the schedule in PyBaMM format"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Schedules belonging to this Schedule Family"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "PatchedTeam": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "member_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "readOnly": true,
                        "description": "Members of this Team"
                    },
                    "admin_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "readOnly": true,
                        "description": "Administrators of this Team"
                    },
                    "monitored_paths": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true
                    },
                    "cellfamily_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cell Families belonging to this Team"
                    },
                    "cell_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cells belonging to this Team"
                    },
                    "equipmentfamily_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Equipment Families belonging to this Team"
                    },
                    "equipment_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Equipment belonging to this Team"
                    },
                    "schedulefamily_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Schedule Families belonging to this Team"
                    },
                    "schedule_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Schedules belonging to this Team"
                    },
                    "cyclertest_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests belonging to this Team"
                    },
                    "experiment_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Experiments belonging to this Team"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly Team identifier"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the Team"
                    },
                    "lab": {
                        "type": "string",
                        "format": "uri",
                        "description": "Lab this Team belongs to"
                    }
                }
            },
            "PatchedUserUpdate": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Your updated email"
                    },
                    "password": {
                        "type": "string",
                        "description": "Your new password"
                    },
                    "currentPassword": {
                        "type": "string",
                        "description": "Your current password"
                    }
                }
            },
            "PatchedValidationSchema": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly identifier"
                    },
                    "schema": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "JSON Schema"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                }
            },
            "Schedule": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "family": {
                        "type": "string",
                        "format": "uri",
                        "description": "Schedule Family this Schedule belongs to"
                    },
                    "schedule_file": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "File containing the schedule"
                    },
                    "pybamm_schedule_variables": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true,
                        "description": "Variables used in the PyBaMM.Experiment representation of the schedule"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "cycler_tests": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests using this Schedule"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "cycler_tests",
                    "family",
                    "in_use",
                    "permissions",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "ScheduleFamily": {
                "type": "object",
                "description": "A ModelSerializer that maps unrecognised properties in the input to an 'additional_properties' JSONField,\nand unpacks the 'additional_properties' JSONField into the output.\n\nThe Meta.model must have an additional_properties JSONField.",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the schedule"
                    },
                    "ambient_temperature": {
                        "type": "number",
                        "format": "double",
                        "nullable": true,
                        "description": "Ambient temperature during the experiment (in degrees Celsius)"
                    },
                    "pybamm_template": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "description": "Template for the schedule in PyBaMM format"
                    },
                    "in_use": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Schedules belonging to this Schedule Family"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "in_use",
                    "permissions",
                    "schedules",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "SchemaValidation": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "schema": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Validation schema used"
                    },
                    "validation_target": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Target of validation"
                    },
                    "status": {
                        "enum": [
                            "VALID",
                            "INVALID",
                            "SKIPPED",
                            "UNCHECKED",
                            "ERROR"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "Validation status"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "detail": {
                        "type": "object",
                        "additionalProperties": {},
                        "readOnly": true,
                        "nullable": true,
                        "description": "Validation detail"
                    },
                    "last_update": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date and time of last status update"
                    }
                },
                "required": [
                    "detail",
                    "id",
                    "last_update",
                    "permissions",
                    "schema",
                    "status",
                    "url",
                    "validation_target"
                ]
            },
            "Team": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "member_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "readOnly": true,
                        "description": "Members of this Team"
                    },
                    "admin_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "readOnly": true,
                        "description": "Administrators of this Team"
                    },
                    "monitored_paths": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true
                    },
                    "cellfamily_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cell Families belonging to this Team"
                    },
                    "cell_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cells belonging to this Team"
                    },
                    "equipmentfamily_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Equipment Families belonging to this Team"
                    },
                    "equipment_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Equipment belonging to this Team"
                    },
                    "schedulefamily_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Schedule Families belonging to this Team"
                    },
                    "schedule_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Schedules belonging to this Team"
                    },
                    "cyclertest_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Cycler Tests belonging to this Team"
                    },
                    "experiment_resources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Experiments belonging to this Team"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly Team identifier"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "Description of the Team"
                    },
                    "lab": {
                        "type": "string",
                        "format": "uri",
                        "description": "Lab this Team belongs to"
                    }
                },
                "required": [
                    "admin_group",
                    "cell_resources",
                    "cellfamily_resources",
                    "cyclertest_resources",
                    "equipment_resources",
                    "equipmentfamily_resources",
                    "experiment_resources",
                    "id",
                    "lab",
                    "member_group",
                    "monitored_paths",
                    "name",
                    "permissions",
                    "schedule_resources",
                    "schedulefamily_resources",
                    "url"
                ]
            },
            "User": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        "pattern": "^[\\w.@+-]+$",
                        "maxLength": 150
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email address",
                        "maxLength": 254
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "description": "Canonical URL for this object"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Auto-assigned object identifier"
                    },
                    "is_staff": {
                        "type": "boolean",
                        "readOnly": true,
                        "title": "Staff status",
                        "description": "Designates whether the user can log into this admin site."
                    },
                    "is_superuser": {
                        "type": "boolean",
                        "readOnly": true,
                        "title": "Superuser status",
                        "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "readOnly": true,
                        "description": "Groups this user belongs to"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "description": "Password (8 characters minimum)",
                        "maxLength": 128
                    },
                    "current_password": {
                        "type": "string",
                        "writeOnly": true,
                        "description": "Current password"
                    }
                },
                "required": [
                    "groups",
                    "id",
                    "is_staff",
                    "is_superuser",
                    "password",
                    "permissions",
                    "url",
                    "username"
                ]
            },
            "ValidationSchema": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "team": {
                        "type": "string",
                        "format": "uri",
                        "description": "Team this resource belongs to"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-friendly identifier"
                    },
                    "schema": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "JSON Schema"
                    },
                    "permissions": {
                        "type": "object",
                        "properties": {
                            "read": {
                                "type": "boolean"
                            },
                            "write": {
                                "type": "boolean"
                            },
                            "create": {
                                "type": "boolean"
                            }
                        },
                        "readOnly": true
                    }
                },
                "required": [
                    "name",
                    "permissions",
                    "schema",
                    "team",
                    "url",
                    "uuid"
                ]
            },
            "ValidationSchemaRootKeys": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Name of the root key"
                    },
                    "describes": {
                        "type": "string",
                        "description": "URL of the objects the key describes"
                    }
                },
                "required": [
                    "describes",
                    "key"
                ]
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            },
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sessionid"
            },
            "harvesterAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Harvester API key"
            },
            "knoxTokenAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}