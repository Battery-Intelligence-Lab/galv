# Generated by Django 4.1.3 on 2022-12-02 12:00

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CellData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('form_factor', models.TextField()),
                ('link_to_datasheet', models.TextField()),
                ('anode_chemistry', models.TextField()),
                ('cathode_chemistry', models.TextField()),
                ('nominal_capacity', models.FloatField()),
                ('nominal_cell_weight', models.FloatField()),
                ('manufacturer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('date', models.DateTimeField()),
                ('type', models.TextField()),
                ('purpose', models.TextField()),
                ('json_data', models.JSONField()),
                ('access_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('cell_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='galvanalyser.celldata')),
                ('owner_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('name', 'date')},
            },
        ),
        migrations.CreateModel(
            name='DataUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('symbol', models.TextField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('type', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Harvester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_id', models.TextField(unique=True)),
                ('name', models.TextField()),
                ('last_successful_run', models.DateTimeField()),
                ('is_running', models.BooleanField(default=False)),
                ('periodic_hour', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MonitoredPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(unique=True)),
                ('harvester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.harvester')),
            ],
            options={
                'unique_together': {('harvester', 'path')},
            },
        ),
        migrations.CreateModel(
            name='TimeseriesRangeLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('range_start', models.PositiveBigIntegerField()),
                ('range_end', models.PositiveBigIntegerField()),
                ('info', models.TextField()),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='MonitoredFor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.monitoredpath')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DataColumnType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='galvanalyser.dataunit')),
            ],
            options={
                'unique_together': {('unit', 'name')},
            },
        ),
        migrations.CreateModel(
            name='DataColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.dataset')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='galvanalyser.datacolumntype')),
            ],
            options={
                'unique_together': {('dataset', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TimeseriesData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.PositiveBigIntegerField()),
                ('value', models.FloatField()),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='galvanalyser.datacolumn')),
            ],
            options={
                'unique_together': {('sample', 'column')},
            },
        ),
        migrations.CreateModel(
            name='ObservedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relative_path', models.TextField()),
                ('last_observed_size', models.PositiveBigIntegerField()),
                ('last_observed_time', models.DateTimeField()),
                ('file_state', models.SmallIntegerField(choices=[(-1, 'Import Failed'), (0, 'Unstable'), (1, 'Growing'), (2, 'Stable'), (3, 'Importing'), (4, 'Imported')], default=0)),
                ('monitored_path', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='galvanalyser.monitoredpath')),
            ],
            options={
                'unique_together': {('monitored_path', 'relative_path')},
            },
        ),
        migrations.CreateModel(
            name='DatasetEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.dataset')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='galvanalyser.equipment')),
            ],
            options={
                'unique_together': {('dataset', 'equipment')},
            },
        ),
    ]
